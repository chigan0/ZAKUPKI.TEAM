from typing import Any, Dict, List

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup

from .keyboards import inline_keyboard
from database import get_db
from handlers.state import SubChannel, AdminPanel, UserTest, Videos, VideosAdm, ArticlesAdm, Articles
from models.articles import all_articles_category, all_articles, article_in_cate
from models.users import get_admin
from settings import settings
from redis import redis_sets, get_redis_data


async def check_sub_channels(bot: Bot, user_id: int) -> bool:
	status: bool = True
	try:
		chat_members = await bot.get_chat_member(chat_id=settings.CHANNEL_ID, user_id=user_id)
		if chat_members.status == 'left':
			status = False

	except TelegramBadRequest:
		status = False

	finally:
		return status


async def main_menu(message: Message, bot: Bot, state: FSMContext, update: bool = True) -> Any:
	buttons: dict
	if not update: await message.delete()
	if await state.get_state() is not None:
		await state.clear()
	
	sub_state = await check_sub_channels(bot, message.from_user.id)
	if not sub_state:
		text = '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –Ω–∞—à—É –≥—Ä—É–ø–ø—É\n\
		\nhttps://t.me/zakupki_team_chat'

		buttons = {'‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è': 'sub'}
		return await warning_message(message, text, buttons, False, state, SubChannel.sub)

	text = "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª"
	buttons = {'üìã –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç': 'difficulty_level', 'üì∞ –ù–∞—à–∏ —Å—Ç–∞—Ç—å–∏': 'articles', 'üé• –ù–∞—à–∏ –≤–∏–¥–µ–æ': 'vidios'}

	with get_db() as session:
		admin_state = await get_admin(session, str(message.chat.id))
	
	if admin_state is not None: buttons['ü§¶‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'] = 'admin_panel'
	
	keyboard = inline_keyboard(buttons, row=2)	

	if update: await message.edit_text(text, reply_markup=keyboard)
	else: await message.answer(text, reply_markup=keyboard)


async def admin_panel(message: Message, bot: Bot, state: FSMContext, update: bool = True) -> Any:
	text = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ZAKUPKI.TEAM \n–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ\n\
	\n–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã \n–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å–∏ \n–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
	
	keyboard = inline_keyboard({
		'üìã –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç': 'add_test',
		'üì∞ –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é':'add_article',
		'üé• –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ': 'add_video',
		'üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': 'add_admin'
	}, menu_button={'< –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'base_menu'}, row=2)

	await state.set_state(AdminPanel.menu)

	if update: await message.edit_text(text, reply_markup=keyboard)
	else:
		await message.delete()
		await message.answer(text, reply_markup=keyboard)


async def warning_message(message: Message, 
		text: str, 
		buttons: dict, 
		update: bool = True,
		state: FSMContext = None,
		state_name: StatesGroup = None
	) -> None:
	keyboard = inline_keyboard(buttons)

	if state is not None:
		await state.set_state(state_name)

	if update:
		await message.edit_text(text, reply_markup=keyboard)

	else:
		await message.answer(text, reply_markup=keyboard)


async def test_difficulty_level(message: Message, bot: Bot, state: FSMContext, admin_state: bool = False):
	text = '–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏'
	test_categorys = await redis_sets('test_category', data_set=False)
	menu_button = {}
	buttons = {}
	
	for i in test_categorys:
		buttons[test_categorys[i]] = i

	if admin_state:
		await state.set_state(AdminPanel.category_selection)
		menu_button['< –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å'] = 'admin_panel'
	
	else:
		await state.set_state(UserTest.difficulty_selection)
		menu_button['< –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'] = 'base_menu'

	keyboard = inline_keyboard(buttons, menu_button=menu_button, row=3)
	await message.edit_text(text, reply_markup=keyboard)


async def test_category(test_id: int, state: FSMContext, admin_state: bool = False):
	buttons = {}
	text = '–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏'
	under_topics = await get_redis_data('test_under_topics', pickle_dumps=True)
	under_topics = under_topics.get(test_id)

	if under_topics is not None:
		text = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é'
		for cate in under_topics:
			buttons[under_topics[cate].title()] = cate
	
	if admin_state:
		menu_button = {'‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é': 'add_under_category', '< –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å': 'admin_panel'}

	else:
		menu_button = {'< –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'base_menu'}

	await state.update_data(under_topics=under_topics, test_category=test_id)
	keyboard = inline_keyboard(buttons, menu_button=menu_button, row=2)
	return text, under_topics, keyboard


async def test_under_topic(under_topic_id: int, state: FSMContext):
	buttons = {}
	state_data: dict = await state.get_data()
	await state.update_data(under_topic_id=under_topic_id)

	tests = await get_redis_data('tests', pickle_dumps=True)
	tests = tests.get(under_topic_id)
		
	if tests is not None:
		for test in tests:
			buttons[tests[test].title()] = test

	text = f"–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏\
	<b>{state_data['under_topics'][under_topic_id].title()}</b>"


	return text, buttons


async def footage_categorys(message: Message, bot: Bot, state: FSMContext, admin_state: bool = False, update = True):
	menu_button = {'< –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'base_menu'}
	categorys = await redis_sets('footage_cate', data_set=False)
	text = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
	buttons = {}

	if admin_state:
		await state.set_state(VideosAdm.cate_selection)
		menu_button = {'‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é': 'add_footage_cate', '< –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å': 'admin_panel'}

	else: await state.set_state(Videos.cate_selection)
	for cate in categorys:
		buttons[categorys[cate]] = cate

	keyboard = inline_keyboard(buttons, menu_button=menu_button, row=2) 

	if update:
		await message.edit_text(text, reply_markup=keyboard)

	else:
		await message.delete()
		await message.answer(text, reply_markup=keyboard)


async def videos_list(footage_cate_id: int, state: FSMContext, admin_state: bool = False):
	buttons = {}
	menu_button = {'< –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'base_menu'}
	videos: Dict[int, str] = await get_redis_data('videos', pickle_dumps=True)
	videos = videos.get(footage_cate_id) if videos is not None else None

	await state.update_data(footage_cate_id=footage_cate_id, videos=videos)
	await state.set_state(Videos.video_selection)

	if admin_state:
		await state.set_state(VideosAdm.video_selection)
		menu_button = {'‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':'del_cate', 
			'‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ': 'add_video', 
			'< –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å': 'admin_panel'
		}
	
	if videos is not None:
		for i in videos:
			buttons[videos[i]['name']] = i

	text = f'–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {len(videos) if videos is not None else 0} –≤–∏–¥–µ–æ' 
	keyboard = inline_keyboard(buttons, menu_button=menu_button, row=2)

	return text, buttons, menu_button


async def articles_categorys(message: Message, bot: Bot, state: FSMContext, admin_state: bool = False, update = True):
	buttons = {}
	menu_button = {'< –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'base_menu'}
	text = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'
	with get_db() as session:
		articles_cate = await all_articles_category(session)
		articles = await all_articles(session)

	await state.update_data(articles_cate=articles_cate)

	if admin_state:
		await state.set_state(ArticlesAdm.cate_selection)
		menu_button = {'‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é': 'add_article_cate', '< –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å': 'admin_panel'}

	else: await state.set_state(Articles.cate_selection)
	for cate in articles_cate:
		buttons[cate.cate_name] = cate.id

	
	keyboard = inline_keyboard(buttons, menu_button=menu_button, row=2)

	if update:await message.edit_text(text, reply_markup=keyboard)
	else:
		await message.delete()
		await message.answer(text, reply_markup=keyboard)	



async def articles(cate_id: int, state: FSMContext, admin_state: bool = False):
	buttons = {}
	text = '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Å—Ç–∞—Ç—å—é'
	menu_button = {'< –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é': 'base_menu'}
	await state.update_data(cate_id=cate_id)

	with get_db() as session:
		articles = await article_in_cate(session, cate_id)

	for article in articles:
		buttons[article.articles_name] = article.id

	await state.set_state(Articles.article_selection)
	if admin_state:
		await state.set_state(ArticlesAdm.article_selection)
		menu_button = {'‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':'del_cate', 
			'‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—å—é': 'add_article', 
			'< –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å': 'admin_panel'
		}


	return text, buttons, menu_button
